on:
  workflow_call:
    inputs:
      runs-on:
        description: The operating system to run the tests on
        required: true
        type: string
      Prerelease:
        description: Run the prerelease version of the action
        required: false
        type: boolean
        default: false
    secrets:
      TEST_USER_PAT:
        description: Personal Access Token for the test user
        required: true
      TEST_USER_USER_FG_PAT:
        description: Personal Access Token for the test user with full gists scope
        required: true
      TEST_USER_ORG_FG_PAT:
        description: Personal Access Token for the test user with full gists scope
        required: true
      TEST_APP_ENT_CLIENT_ID:
        description: Client ID for the test GitHub App for the enterprise
        required: true
      TEST_APP_ENT_PRIVATE_KEY:
        description: Private Key for the test GitHub App for the enterprise
        required: true
      TEST_APP_ORG_CLIENT_ID:
        description: Client ID for the test GitHub App for the organization
        required: true
      TEST_APP_ORG_PRIVATE_KEY:
        description: Private Key for the test GitHub App for the organization
        required: true

permissions:
  contents: read
  pull-requests: read

jobs:
  ActionTestBasic:
    name: Basic
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          Prerelease: ${{ inputs.Prerelease }}
          Debug: true
          Verbose: true

      - name: Action-Test [ShowInit]
        uses: ./
        with:
          Prerelease: ${{ inputs.Prerelease }}
          Debug: true
          Verbose: true
          ShowInit: true

  ActionTestWithScript:
    name: WithScript
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      # # Not a supported way of running the action
      # # This syntax is specifically for using a function in a specific module
      # # i.e.: moduleName\functionName
      # - name: Action-Test [tests\info.ps1]
      #   if: success() || failure()
      #   uses: ./
      #   with:
      #     Script: tests\info.ps1

      - name: Action-Test [tests/info.ps1]
        if: success() || failure()
        uses: ./
        with:
          Script: tests/info.ps1
          Prerelease: ${{ inputs.Prerelease }}

      - name: Action-Test [.\tests\info.ps1]
        if: success() || failure()
        uses: ./
        with:
          Script: .\tests\info.ps1
          Prerelease: ${{ inputs.Prerelease }}

      - name: Action-Test [./tests/info.ps1]
        if: success() || failure()
        uses: ./
        with:
          Script: ./tests/info.ps1
          Prerelease: ${{ inputs.Prerelease }}

      - name: Action-Test [. .\tests\info.ps1]
        if: success() || failure()
        uses: ./
        with:
          Script: . .\tests\info.ps1
          Prerelease: ${{ inputs.Prerelease }}

      - name: Action-Test [. ./tests/info.ps1]
        if: success() || failure()
        uses: ./
        with:
          Script: . ./tests/info.ps1
          Prerelease: ${{ inputs.Prerelease }}

      - name: Action-Test [. '.\tests\info.ps1']
        if: success() || failure()
        uses: ./
        with:
          Script: . '.\tests\info.ps1'
          Prerelease: ${{ inputs.Prerelease }}

      - name: Action-Test [. './tests/info.ps1']
        if: success() || failure()
        uses: ./
        with:
          Script: . './tests/info.ps1'
          Prerelease: ${{ inputs.Prerelease }}

  ActionTestCommands:
    name: Commands + Outputs
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        id: test
        with:
          Debug: true
          Verbose: true
          Prerelease: ${{ inputs.Prerelease }}
          ShowInit: true
          ShowOutput: true
          Script: |
            LogGroup 'Get-GitHubZen' {
              $cat = Get-GitHubOctocat
              $zen = Get-GitHubZen
              Set-GitHubEnvironmentVariable -Name 'OCTOCAT' -Value $cat
            }

            LogGroup 'Set outputs - WISECAT' {
              Set-GitHubOutput -Name 'WISECAT' -Value $cat
            }

            LogGroup 'Set outputs - Zen' {
              Set-GitHubOutput -Name 'Zen' -Value $zen
            }

            LogGroup 'Set outputs - Context' {
              Set-GitHubOutput -Name 'Context' -Value (Get-GitHubContext)
            }

            LogGroup 'Set outputs - GitConfig' {
              Set-GitHubOutput -Name 'GitConfig' -Value (Get-GitHubGitConfig -Scope system)
            }

            LogGroup 'Set outputs - Zen2' {
              Set-GitHubOutput -Name 'Zen2' -Value $zen
            }

            LogGroup 'Set array outputs' {
              $complexArray = @(
                [pscustomobject]@{
                  Name = 'Test'
                  Value = 'Value'
                  Cars = @(
                    @{
                      Make = 'Toyota'
                      Model = 'Corolla'
                    },
                    @{
                      Make = 'Ford'
                      Model = 'Fiesta'
                    }
                  )
                },
                [pscustomobject]@{
                  Name = 'Test2'
                  Value = 'Value2'
                  Cars = @(
                    @{
                      Make = 'Toyota'
                      Model = 'Corolla'
                    },
                    @{
                      Make = 'Ford'
                      Model = 'Fiesta'
                    }
                  )
                }
              )
              Set-GitHubOutput -Name 'ComplexArray' -Value $complexArray
            }

            LogGroup 'Set array outputs - JSON' {
              $compexJson = $complexArray | ConvertTo-Json -Depth 10
              Set-GitHubOutput -Name 'ComplexArrayJson' -Value $compexJson
            }

      - name: Run-test
        shell: pwsh
        env:
          result: ${{ steps.test.outputs.result }}
          WISECAT: ${{ fromJson(steps.test.outputs.result).WISECAT }}
          Zen: ${{ fromJson(steps.test.outputs.result).Zen }}
          Context: ${{ fromJson(steps.test.outputs.result).Context }}
          GitConfig: ${{ fromJson(steps.test.outputs.result).GitConfig }}
          Zen2: ${{ fromJson(steps.test.outputs.result).Zen2 }}
          # ComplexArray: ${{ fromJson(steps.test.outputs.result).ComplexArray }}
          # ComplexArrayJson: ${{ fromJson(steps.test.outputs.result).ComplexArrayJson }}
        run: |
          $result = $env:result | ConvertFrom-Json
          Set-GitHubStepSummary -Summary $env:WISECAT
          Write-GitHubNotice -Message $result.Zen -Title 'GitHub Zen'
          Write-Host ($result.Zen2)
          $result.Context | Format-List
          $result.GitConfig | Format-List

          LogGroup 'Result - Json' {
            $env:result
          }

          LogGroup 'Result - Object' {
            $result
          }

  ActionTestWithoutToken:
    name: WithoutToken
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          Token: ''
          Prerelease: ${{ inputs.Prerelease }}
          Script: |
            LogGroup 'My group' {
              'This is a group'
            }

  ActionTestWithPAT:
    name: WithPAT
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          Token: ${{ secrets.TEST_USER_PAT }}
          Prerelease: ${{ inputs.Prerelease }}
          Script: |
            LogGroup 'Get-GitHubUser' {
              Get-GitHubUser | Format-Table -AutoSize
            }

  ActionTestWithUSERFGPAT:
    name: WithUserFGPAT
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          Token: ${{ secrets.TEST_USER_USER_FG_PAT }}
          Prerelease: ${{ inputs.Prerelease }}
          Script: |
            LogGroup 'Get-GitHubUser' {
              Get-GitHubUser | Format-Table -AutoSize
            }

  ActionTestWithORGFGPAT:
    name: WithOrgFGPAT
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          Token: ${{ secrets.TEST_USER_ORG_FG_PAT }}
          Prerelease: ${{ inputs.Prerelease }}
          Script: |
            LogGroup 'Get-GitHubUser' {
              Get-GitHubUser | Format-Table -AutoSize
            }

  ActionTestWithGitHubAppEnt:
    name: GitHubAppEnt
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          ClientID: ${{ secrets.TEST_APP_ENT_CLIENT_ID }}
          PrivateKey: ${{ secrets.TEST_APP_ENT_PRIVATE_KEY }}
          Prerelease: ${{ inputs.Prerelease }}
          Script: |
            LogGroup 'Get-GitHubApp' {
              Get-GitHubApp | Format-Table -AutoSize
            }

            LogGroup 'Get-GitHubAppInstallation' {
              Get-GitHubAppInstallation | Format-Table -AutoSize
            }

            LogGroup 'Do something as an installation' {
              Get-GithubAppInstallation | New-GitHubAppInstallationAccessToken | ForEach-Object {
                Connect-GitHub -Token $_.token -Silent
                Get-GitHubContext | Format-Table -AutoSize
                Get-GitHubGitConfig | Format-Table -AutoSize
              }
            }

  ActionTestWithGitHubAppOrg:
    name: GitHubAppOrg
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Need to check out as part of the test, as its a local action
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          ClientID: ${{ secrets.TEST_APP_ORG_CLIENT_ID }}
          PrivateKey: ${{ secrets.TEST_APP_ORG_PRIVATE_KEY }}
          Prerelease: ${{ inputs.Prerelease }}
          Script: |
            LogGroup 'Get-GitHubApp' {
              Get-GitHubApp | Format-Table -AutoSize
            }

            LogGroup 'Get-GitHubAppInstallation' {
              Get-GitHubAppInstallation | Format-Table -AutoSize
            }

            LogGroup 'Do something as an installation' {
              Get-GithubAppInstallation | New-GitHubAppInstallationAccessToken | ForEach-Object {
                Connect-GitHub -Token $_.token -Silent
                Get-GitHubContext | Format-Table -AutoSize
                Get-GitHubGitConfig | Format-Table -AutoSize
              }
            }
